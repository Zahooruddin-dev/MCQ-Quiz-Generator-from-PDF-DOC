import React from 'react';
import { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType } from 'docx';

const AnswerKeyGenerator = {
  // Generate watermark style for PDF
  getWatermarkStyle: () => {
    return `
      @media print {
        .watermark {
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%) rotate(-45deg);
          font-size: 6em;
          opacity: 0.1;
          color: #999;
          pointer-events: none;
          z-index: -1;
          font-weight: bold;
          font-family: 'Arial', sans-serif;
        }
      }
    `;
  },

  // Generate PDF Answer Key
  generatePDF: async (quizData, questions) => {
    const quizTitle = quizData?.title || 'Quiz';
    const date = new Date().toLocaleDateString();
    
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>${quizTitle} - Answer Key</title>
        <style>
          ${AnswerKeyGenerator.getWatermarkStyle()}
          @media print { 
            @page { 
              margin: 1in; 
              @bottom-center {
                content: "Generated by QuizAi - ${new Date().toLocaleDateString()}";
                font-size: 10pt;
                color: #888;
              }
            } 
          }
          body { 
            font-family: 'Arial', sans-serif; 
            line-height: 1.6; 
            color: #333; 
            max-width: 100%; 
            margin: 0; 
            padding: 20px;
            position: relative;
          }
          .watermark {
            display: block;
          }
          .header { 
            text-align: center; 
            margin-bottom: 30px; 
            border-bottom: 2px solid #d32f2f;
            padding-bottom: 15px;
          }
          .title { 
            font-size: 28px; 
            font-weight: bold; 
            margin-bottom: 10px;
            color: #d32f2f;
          }
          .info { 
            font-size: 16px; 
            margin: 8px 0;
            color: #555;
          }
          .warning {
            color: #d32f2f;
            font-weight: bold;
            background: #ffebee;
            padding: 10px;
            border-radius: 5px;
            text-align: center;
            margin: 20px 0;
            border: 1px solid #ffcdd2;
          }
          .answer-grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 12px;
            margin: 25px 0;
            padding: 20px;
            border: 2px solid #d32f2f;
            border-radius: 8px;
            background: #fff;
          }
          .answer-item {
            text-align: center;
            font-weight: bold;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            background: #f5f5f5;
          }
          .question-number {
            font-size: 14px;
            color: #777;
          }
          .detailed-answers {
            margin-top: 40px;
          }
          .section-title {
            font-size: 22px;
            font-weight: bold;
            color: #333;
            border-bottom: 2px solid #3f51b5;
            padding-bottom: 10px;
            margin-bottom: 20px;
          }
          .question-answer { 
            margin: 20px 0; 
            padding: 20px;
            border-left: 5px solid #4caf50;
            background: #f1f8e9;
            border-radius: 8px;
            page-break-inside: avoid;
          }
          .question-text { 
            font-weight: bold; 
            margin-bottom: 12px; 
            font-size: 18px;
            color: #333;
          }
          .correct-answer { 
            color: #2e7d32; 
            font-weight: bold;
            font-size: 16px;
            margin: 10px 0;
          }
          .explanation { 
            margin-top: 12px; 
            font-style: italic; 
            color: #555;
            padding: 12px;
            background: #e8f5e9;
            border-radius: 4px;
          }
          .footer { 
            margin-top: 40px; 
            text-align: center; 
            font-size: 12px;
            color: #888;
            border-top: 1px solid #eee;
            padding-top: 15px;
          }
        </style>
      </head>
      <body>
        <div class="watermark">QuizAi</div>
        
        <div class="header">
          <div class="title">${quizTitle} - Answer Key</div>
          <div class="info">Date: ${date}</div>
          <div class="info">Total Questions: ${questions.length}</div>
          <div class="warning">‚ö†Ô∏è TEACHER'S ANSWER KEY - DO NOT DISTRIBUTE TO STUDENTS ‚ö†Ô∏è</div>
        </div>
        
        <div class="answer-grid">
          ${questions.map((question, index) => `
            <div class="answer-item">
              <div class="question-number">${index + 1}</div>
              ${String.fromCharCode(65 + question.correctAnswer)}
            </div>
          `).join('')}
        </div>
        
        <div class="detailed-answers">
          <div class="section-title">Detailed Answers & Explanations</div>
          ${questions.map((question, index) => `
            <div class="question-answer">
              <div class="question-text">
                ${index + 1}. ${question.question}
              </div>
              <div class="correct-answer">
                ‚úÖ Correct Answer: ${String.fromCharCode(65 + question.correctAnswer)}. ${question.options[question.correctAnswer]}
              </div>
              ${question.explanation ? `
                <div class="explanation">
                  üí° Explanation: ${question.explanation}
                </div>
              ` : ''}
            </div>
          `).join('')}
        </div>
        
        <div class="footer warning">
          ‚ö†Ô∏è TEACHER'S ANSWER KEY - DO NOT DISTRIBUTE TO STUDENTS ‚ö†Ô∏è<br>
          Generated by QuizAi on ${new Date().toLocaleString()} | www.quizai.com
        </div>
      </body>
      </html>
    `;

    const printWindow = window.open('', '_blank');
    printWindow.document.write(htmlContent);
    printWindow.document.close();
    
    setTimeout(() => {
      printWindow.print();
    }, 500);
  },

  // Generate TXT Answer Key
  generateTXT: async (quizData, questions) => {
    const quizTitle = quizData?.title || 'Quiz';
    const date = new Date().toLocaleDateString();

    let content = `${quizTitle.toUpperCase()} - ANSWER KEY\n`;
    content += `${'='.repeat(quizTitle.length + 12)}\n\n`;
    content += `‚ö†Ô∏è TEACHER'S ANSWER KEY - DO NOT DISTRIBUTE TO STUDENTS ‚ö†Ô∏è\n\n`;
    content += `Date: ${date}\n`;
    content += `Total Questions: ${questions.length}\n\n`;
    
    content += `QUICK REFERENCE:\n`;
    content += `${'-'.repeat(50)}\n`;
    questions.forEach((question, index) => {
      if (index % 10 === 0 && index > 0) content += `\n`;
      content += `${(index + 1).toString().padStart(2, '0')}. ${String.fromCharCode(65 + question.correctAnswer)}  `;
    });
    content += `\n\n`;
    
    content += `DETAILED ANSWERS & EXPLANATIONS:\n`;
    content += `${'='.repeat(50)}\n\n`;
    
    questions.forEach((question, index) => {
      content += `${index + 1}. ${question.question}\n`;
      content += `   ‚úÖ Correct Answer: ${String.fromCharCode(65 + question.correctAnswer)}. ${question.options[question.correctAnswer]}\n`;
      if (question.explanation) {
        content += `   üí° Explanation: ${question.explanation}\n`;
      }
      content += `\n`;
    });
    
    content += `\n‚ö†Ô∏è CONFIDENTIAL - FOR TEACHER USE ONLY ‚ö†Ô∏è\n`;
    content += `Generated by QuizAi on ${new Date().toLocaleString()}\n`;
    content += `www.quizai.com\n`;
    
    const blob = new Blob([content], { type: 'text/plain;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `${quizData?.title || 'quiz'}-answer-key.txt`;
    link.click();
    URL.revokeObjectURL(link.href);
  },

  // Generate DOCX Answer Key
  generateDOCX: async (quizData, questions) => {
    const doc = new Document({
      sections: [{
        properties: {},
        children: [
          new Paragraph({
            text: `${quizData?.title || "Quiz"} - Answer Key`,
            heading: HeadingLevel.HEADING_1,
            alignment: AlignmentType.CENTER,
            color: "d32f2f",
            spacing: { after: 400 },
          }),
          new Paragraph({
            children: [
              new TextRun({
                text: `Date: ${new Date().toLocaleDateString()}`,
                size: 22,
              }),
            ],
          }),
          new Paragraph({
            children: [
              new TextRun({
                text: `Total Questions: ${questions.length}`,
                size: 22,
              }),
            ],
          }),
          new Paragraph({
            text: "‚ö†Ô∏è TEACHER'S ANSWER KEY - DO NOT DISTRIBUTE TO STUDENTS ‚ö†Ô∏è",
            alignment: AlignmentType.CENTER,
            color: "d32f2f",
            bold: true,
            shading: { fill: "FFEBEE" },
            spacing: { after: 400 },
          }),
          new Paragraph({
            text: "Quick Reference:",
            heading: HeadingLevel.HEADING_2,
          }),
          new Paragraph({
            text: questions.map((question, index) => 
              `${index + 1}. ${String.fromCharCode(65 + question.correctAnswer)}`
            ).join("   "),
            spacing: { after: 400 },
          }),
          new Paragraph({
            text: "Detailed Answers & Explanations:",
            heading: HeadingLevel.HEADING_2,
            spacing: { after: 400 },
          }),
          ...questions.flatMap((question, index) => [
            new Paragraph({
              text: `${index + 1}. ${question.question}`,
              heading: HeadingLevel.HEADING_3,
              spacing: { after: 200 },
            }),
            new Paragraph({
              text: `Correct Answer: ${String.fromCharCode(65 + question.correctAnswer)}. ${question.options[question.correctAnswer]}`,
              color: "2E7D32",
              bold: true,
              spacing: { after: 200 },
            }),
            ...(question.explanation ? [
              new Paragraph({
                text: `Explanation: ${question.explanation}`,
                italics: true,
                spacing: { after: 400 },
              })
            ] : [new Paragraph({ text: "", spacing: { after: 400 } })]),
          ]),
          new Paragraph({
            text: "‚ö†Ô∏è CONFIDENTIAL - FOR TEACHER USE ONLY ‚ö†Ô∏è",
            alignment: AlignmentType.CENTER,
            color: "d32f2f",
            bold: true,
            size: 20,
          }),
          new Paragraph({
            text: `Generated by QuizAi on ${new Date().toLocaleString()}`,
            alignment: AlignmentType.CENTER,
            size: 20,
            color: "888888",
          }),
        ],
      }],
    });

    const blob = await Packer.toBlob(doc);
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${quizData?.title || 'quiz'}-answer-key.docx`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }
};

export default AnswerKeyGenerator;