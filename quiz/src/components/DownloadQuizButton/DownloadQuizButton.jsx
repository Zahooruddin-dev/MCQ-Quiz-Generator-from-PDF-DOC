import React, { useState } from 'react';
import {
  Button,
  CircularProgress,
  Snackbar,
  Alert,
  Menu,
  MenuItem,
  ListItemIcon,
  ListItemText,
  Divider,
  Fade,
  Zoom
} from '@mui/material';
import {
  GetAppOutlined as DownloadIcon,
  PictureAsPdfOutlined as PdfIcon,
  ArticleOutlined as DocxIcon,
} from '@mui/icons-material';

import { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType } from 'docx';

const DownloadQuizButton = ({ 
  quizData, 
  questions = [], 
  variant = 'outlined',
  size = 'large',
  fullWidth = false 
}) => {
  const [loading, setLoading] = useState(false);
  const [loadingFormat, setLoadingFormat] = useState(null);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });
  const [anchorEl, setAnchorEl] = useState(null);

  const showSnackbar = (message, severity = 'success') => {
    setSnackbar({ open: true, message, severity });
  };

  const handleMenuOpen = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
  };

  // Generate watermark style for PDF
  const getWatermarkStyle = () => {
    return `
      @media print {
        .watermark {
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%) rotate(-45deg);
          font-size: 6em;
          opacity: 0.1;
          color: #999;
          pointer-events: none;
          z-index: -1;
          font-weight: bold;
          font-family: 'Arial', sans-serif;
        }
      }
    `;
  };

  // Generate Quiz Sheet (Questions Only)
  const generateQuizSheet = async (format) => {
    const quizTitle = quizData?.title || 'Quiz Sheet';
    const date = new Date().toLocaleDateString();
    
    if (format === 'pdf') {
      const htmlContent = `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="UTF-8">
          <title>${quizTitle}</title>
          <style>
            ${getWatermarkStyle()}
            @media print { 
              @page { 
                margin: 1in; 
                @bottom-center {
                  content: "Generated by QuizAi - ${new Date().toLocaleDateString()}";
                  font-size: 10pt;
                  color: #888;
                }
              } 
            }
            body { 
              font-family: 'Arial', sans-serif; 
              line-height: 1.6; 
              color: #333; 
              max-width: 100%; 
              margin: 0; 
              padding: 20px;
              position: relative;
            }
            .watermark {
              display: block;
            }
            .header { 
              text-align: center; 
              margin-bottom: 30px; 
              border-bottom: 2px solid #3f51b5;
              padding-bottom: 15px;
            }
            .title { 
              font-size: 28px; 
              font-weight: bold; 
              margin-bottom: 10px;
              color: #3f51b5;
            }
            .info { 
              font-size: 16px; 
              margin: 8px 0;
              color: #555;
            }
            .instructions {
              background: #f0f4ff;
              border: 1px solid #c5cae9;
              padding: 20px;
              margin: 20px 0;
              border-radius: 8px;
              box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            }
            .question { 
              margin: 30px 0; 
              page-break-inside: avoid;
              clear: both;
              padding: 15px;
              border: 1px solid #e0e0e0;
              border-radius: 8px;
              background: #fff;
            }
            .question-header { 
              font-weight: bold; 
              margin-bottom: 12px; 
              font-size: 18px;
              color: #333;
            }
            .context {
              font-style: italic;
              color: #666;
              margin-bottom: 12px;
              padding: 12px;
              background: #f9f9f9;
              border-left: 4px solid #ddd;
              border-radius: 4px;
            }
            .options { 
              margin-left: 20px;
              line-height: 1.8;
            }
            .option { 
              margin: 10px 0;
              display: block;
            }
            .option-letter {
              font-weight: bold;
              margin-right: 8px;
              color: #3f51b5;
            }
            .answer-line {
              margin-top: 20px;
              border-bottom: 2px dotted #ccc;
              min-height: 28px;
              padding: 5px 0;
              font-weight: bold;
              color: #333;
            }
            .footer { 
              margin-top: 40px; 
              text-align: center; 
              font-size: 12px;
              color: #888;
              border-top: 1px solid #eee;
              padding-top: 15px;
            }
          </style>
        </head>
        <body>
          <div class="watermark">QuizAi</div>
          
          <div class="header">
            <div class="title">${quizTitle}</div>
            <div class="info">Date: ${date}</div>
            <div class="info">Total Questions: ${questions.length}</div>
            <div class="info">Name: _________________________ Class: _________</div>
          </div>
          
          <div class="instructions">
            <strong style="font-size: 18px; color: #3f51b5;">Instructions:</strong>
            <ul style="margin: 15px 0; padding-left: 20px;">
              <li style="margin-bottom: 8px;">Read each question carefully</li>
              <li style="margin-bottom: 8px;">Choose the best answer for each multiple choice question</li>
              <li style="margin-bottom: 8px;">Mark your answer clearly</li>
              <li>Use the answer line provided for each question</li>
            </ul>
          </div>
          
          ${questions.map((question, index) => `
            <div class="question">
              <div class="question-header">
                ${index + 1}. ${question.question}
              </div>
              ${question.context ? `<div class="context">${question.context}</div>` : ''}
              <div class="options">
                ${question.options?.map((option, optionIndex) => 
                  `<div class="option">
                    <span class="option-letter">${String.fromCharCode(65 + optionIndex)}.</span> ${option}
                  </div>`
                ).join('') || ''}
              </div>
              <div class="answer-line">
                Answer: _________________________________________
              </div>
            </div>
          `).join('')}
          
          <div class="footer">
            Quiz Generated by QuizAi on ${new Date().toLocaleString()} | www.quizai.com
          </div>
        </body>
        </html>
      `;

      const printWindow = window.open('', '_blank');
      printWindow.document.write(htmlContent);
      printWindow.document.close();
      
      setTimeout(() => {
        printWindow.print();
      }, 500);

    } else if (format === 'txt') {
      let content = `${quizTitle.toUpperCase()}\n`;
      content += `${'='.repeat(quizTitle.length)}\n\n`;
      content += `Date: ${date}\n`;
      content += `Total Questions: ${questions.length}\n`;
      content += `Name: _________________________ Class: _________\n\n`;
      
      content += `INSTRUCTIONS:\n`;
      content += `- Read each question carefully\n`;
      content += `- Choose the best answer for each multiple choice question\n`;
      content += `- Write your answer clearly in the space provided\n\n`;
      
      content += `${'-'.repeat(60)}\n\n`;
      
      questions.forEach((question, index) => {
        content += `${index + 1}. ${question.question}\n`;
        if (question.context) {
          content += `   [Context: ${question.context}]\n`;
        }
        question.options?.forEach((option, optionIndex) => {
          content += `   ${String.fromCharCode(65 + optionIndex)}. ${option}\n`;
        });
        content += `   Answer: _________________________________________________\n\n`;
      });
      
      content += `\nGenerated by QuizAi on ${new Date().toLocaleString()}\n`;
      content += `www.quizai.com\n`;
      
      const blob = new Blob([content], { type: 'text/plain;charset=utf-8;' });
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.download = `${quizData?.title || 'quiz'}-sheet.txt`;
      link.click();
      URL.revokeObjectURL(link.href);
    } else if (format === 'docx') {
      // Create a new document for the quiz sheet
      const doc = new Document({
        sections: [{
          properties: {},
          children: [
            new Paragraph({
              text: quizData?.title || "Quiz Sheet",
              heading: HeadingLevel.HEADING_1,
              alignment: AlignmentType.CENTER,
              spacing: { after: 400 },
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: `Date: ${new Date().toLocaleDateString()}`,
                  size: 22,
                }),
              ],
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: `Total Questions: ${questions.length}`,
                  size: 22,
                }),
              ],
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "Name: _________________________ Class: _________",
                  size: 22,
                }),
              ],
              spacing: { after: 400 },
            }),
            new Paragraph({
              text: "Instructions:",
              heading: HeadingLevel.HEADING_2,
            }),
            new Paragraph({
              text: "• Read each question carefully",
            }),
            new Paragraph({
              text: "• Choose the best answer for each multiple choice question",
            }),
            new Paragraph({
              text: "• Mark your answer clearly",
            }),
            new Paragraph({
              text: "• Use the answer line provided for each question",
              spacing: { after: 400 },
            }),
            ...questions.flatMap((question, index) => [
              new Paragraph({
                text: `${index + 1}. ${question.question}`,
                heading: HeadingLevel.HEADING_3,
                spacing: { after: 200 },
              }),
              ...(question.context ? [
                new Paragraph({
                  text: `Context: ${question.context}`,
                  italics: true,
                  spacing: { after: 200 },
                })
              ] : []),
              ...(question.options?.map((option, optionIndex) => 
                new Paragraph({
                  text: `${String.fromCharCode(65 + optionIndex)}. ${option}`,
                  indent: { left: 400 },
                })
              ) || []),
              new Paragraph({
                text: "Answer: _________________________________________",
                spacing: { after: 400 },
              }),
            ]),
            new Paragraph({
              text: `Generated by QuizAi on ${new Date().toLocaleString()}`,
              alignment: AlignmentType.CENTER,
              size: 20,
              color: "888888",
            }),
          ],
        }],
      });

      // Generate the DOCX file
      const blob = await Packer.toBlob(doc);
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `${quizData?.title || 'quiz'}-sheet.docx`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    }
  };

  // Generate Answer Key
  const generateAnswerKey = async (format) => {
    const quizTitle = quizData?.title || 'Quiz';
    const date = new Date().toLocaleDateString();
    
    if (format === 'pdf') {
      const htmlContent = `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="UTF-8">
          <title>${quizTitle} - Answer Key</title>
          <style>
            ${getWatermarkStyle()}
            @media print { 
              @page { 
                margin: 1in; 
                @bottom-center {
                  content: "Generated by QuizAi - ${new Date().toLocaleDateString()}";
                  font-size: 10pt;
                  color: #888;
                }
              } 
            }
            body { 
              font-family: 'Arial', sans-serif; 
              line-height: 1.6; 
              color: #333; 
              max-width: 100%; 
              margin: 0; 
              padding: 20px;
              position: relative;
            }
            .watermark {
              display: block;
            }
            .header { 
              text-align: center; 
              margin-bottom: 30px; 
              border-bottom: 2px solid #d32f2f;
              padding-bottom: 15px;
            }
            .title { 
              font-size: 28px; 
              font-weight: bold; 
              margin-bottom: 10px;
              color: #d32f2f;
            }
            .info { 
              font-size: 16px; 
              margin: 8px 0;
              color: #555;
            }
            .warning {
              color: #d32f2f;
              font-weight: bold;
              background: #ffebee;
              padding: 10px;
              border-radius: 5px;
              text-align: center;
              margin: 20px 0;
              border: 1px solid #ffcdd2;
            }
            .answer-grid {
              display: grid;
              grid-template-columns: repeat(5, 1fr);
              gap: 12px;
              margin: 25px 0;
              padding: 20px;
              border: 2px solid #d32f2f;
              border-radius: 8px;
              background: #fff;
            }
            .answer-item {
              text-align: center;
              font-weight: bold;
              padding: 10px;
              border: 1px solid #ccc;
              border-radius: 4px;
              background: #f5f5f5;
            }
            .question-number {
              font-size: 14px;
              color: #777;
            }
            .detailed-answers {
              margin-top: 40px;
            }
            .section-title {
              font-size: 22px;
              font-weight: bold;
              color: #333;
              border-bottom: 2px solid #3f51b5;
              padding-bottom: 10px;
              margin-bottom: 20px;
            }
            .question-answer { 
              margin: 20px 0; 
              padding: 20px;
              border-left: 5px solid #4caf50;
              background: #f1f8e9;
              border-radius: 8px;
              page-break-inside: avoid;
            }
            .question-text { 
              font-weight: bold; 
              margin-bottom: 12px; 
              font-size: 18px;
              color: #333;
            }
            .correct-answer { 
              color: #2e7d32; 
              font-weight: bold;
              font-size: 16px;
              margin: 10px 0;
            }
            .explanation { 
              margin-top: 12px; 
              font-style: italic; 
              color: #555;
              padding: 12px;
              background: #e8f5e9;
              border-radius: 4px;
            }
            .footer { 
              margin-top: 40px; 
              text-align: center; 
              font-size: 12px;
              color: #888;
              border-top: 1px solid #eee;
              padding-top: 15px;
            }
          </style>
        </head>
        <body>
          <div class="watermark">QuizAi</div>
          
          <div class="header">
            <div class="title">${quizTitle} - Answer Key</div>
            <div class="info">Date: ${date}</div>
            <div class="info">Total Questions: ${questions.length}</div>
            <div class="warning">⚠️ TEACHER'S ANSWER KEY - DO NOT DISTRIBUTE TO STUDENTS ⚠️</div>
          </div>
          
          <div class="answer-grid">
            ${questions.map((question, index) => `
              <div class="answer-item">
                <div class="question-number">${index + 1}</div>
                ${String.fromCharCode(65 + question.correctAnswer)}
              </div>
            `).join('')}
          </div>
          
          <div class="detailed-answers">
            <div class="section-title">Detailed Answers & Explanations</div>
            ${questions.map((question, index) => `
              <div class="question-answer">
                <div class="question-text">
                  ${index + 1}. ${question.question}
                </div>
                <div class="correct-answer">
                  ✅ Correct Answer: ${String.fromCharCode(65 + question.correctAnswer)}. ${question.options[question.correctAnswer]}
                </div>
                ${question.explanation ? `
                  <div class="explanation">
                    💡 Explanation: ${question.explanation}
                  </div>
                ` : ''}
              </div>
            `).join('')}
          </div>
          
          <div class="footer warning">
            ⚠️ TEACHER'S ANSWER KEY - DO NOT DISTRIBUTE TO STUDENTS ⚠️<br>
            Generated by QuizAi on ${new Date().toLocaleString()} | www.quizai.com
          </div>
        </body>
        </html>
      `;

      const printWindow = window.open('', '_blank');
      printWindow.document.write(htmlContent);
      printWindow.document.close();
      
      setTimeout(() => {
        printWindow.print();
      }, 500);

    } else if (format === 'txt') {
      let content = `${quizTitle.toUpperCase()} - ANSWER KEY\n`;
      content += `${'='.repeat(quizTitle.length + 12)}\n\n`;
      content += `⚠️ TEACHER'S ANSWER KEY - DO NOT DISTRIBUTE TO STUDENTS ⚠️\n\n`;
      content += `Date: ${date}\n`;
      content += `Total Questions: ${questions.length}\n\n`;
      
      content += `QUICK REFERENCE:\n`;
      content += `${'-'.repeat(50)}\n`;
      questions.forEach((question, index) => {
        if (index % 10 === 0 && index > 0) content += `\n`;
        content += `${(index + 1).toString().padStart(2, '0')}. ${String.fromCharCode(65 + question.correctAnswer)}  `;
      });
      content += `\n\n`;
      
      content += `DETAILED ANSWERS & EXPLANATIONS:\n`;
      content += `${'='.repeat(50)}\n\n`;
      
      questions.forEach((question, index) => {
        content += `${index + 1}. ${question.question}\n`;
        content += `   ✅ Correct Answer: ${String.fromCharCode(65 + question.correctAnswer)}. ${question.options[question.correctAnswer]}\n`;
        if (question.explanation) {
          content += `   💡 Explanation: ${question.explanation}\n`;
        }
        content += `\n`;
      });
      
      content += `\n⚠️ CONFIDENTIAL - FOR TEACHER USE ONLY ⚠️\n`;
      content += `Generated by QuizAi on ${new Date().toLocaleString()}\n`;
      content += `www.quizai.com\n`;
      
      const blob = new Blob([content], { type: 'text/plain;charset=utf-8;' });
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.download = `${quizData?.title || 'quiz'}-answer-key.txt`;
      link.click();
      URL.revokeObjectURL(link.href);
    } else if (format === 'docx') {
      // Create a new document for the answer key
      const doc = new Document({
        sections: [{
          properties: {},
          children: [
            new Paragraph({
              text: `${quizData?.title || "Quiz"} - Answer Key`,
              heading: HeadingLevel.HEADING_1,
              alignment: AlignmentType.CENTER,
              color: "d32f2f",
              spacing: { after: 400 },
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: `Date: ${new Date().toLocaleDateString()}`,
                  size: 22,
                }),
              ],
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: `Total Questions: ${questions.length}`,
                  size: 22,
                }),
              ],
            }),
            new Paragraph({
              text: "⚠️ TEACHER'S ANSWER KEY - DO NOT DISTRIBUTE TO STUDENTS ⚠️",
              alignment: AlignmentType.CENTER,
              color: "d32f2f",
              bold: true,
              shading: { fill: "FFEBEE" },
              spacing: { after: 400 },
            }),
            new Paragraph({
              text: "Quick Reference:",
              heading: HeadingLevel.HEADING_2,
            }),
            new Paragraph({
              text: questions.map((question, index) => 
                `${index + 1}. ${String.fromCharCode(65 + question.correctAnswer)}`
              ).join("   "),
              spacing: { after: 400 },
            }),
            new Paragraph({
              text: "Detailed Answers & Explanations:",
              heading: HeadingLevel.HEADING_2,
              spacing: { after: 400 },
            }),
            ...questions.flatMap((question, index) => [
              new Paragraph({
                text: `${index + 1}. ${question.question}`,
                heading: HeadingLevel.HEADING_3,
                spacing: { after: 200 },
              }),
              new Paragraph({
                text: `Correct Answer: ${String.fromCharCode(65 + question.correctAnswer)}. ${question.options[question.correctAnswer]}`,
                color: "2E7D32",
                bold: true,
                spacing: { after: 200 },
              }),
              ...(question.explanation ? [
                new Paragraph({
                  text: `Explanation: ${question.explanation}`,
                  italics: true,
                  spacing: { after: 400 },
                })
              ] : [new Paragraph({ text: "", spacing: { after: 400 } })]),
            ]),
            new Paragraph({
              text: "⚠️ CONFIDENTIAL - FOR TEACHER USE ONLY ⚠️",
              alignment: AlignmentType.CENTER,
              color: "d32f2f",
              bold: true,
              size: 20,
            }),
            new Paragraph({
              text: `Generated by QuizAi on ${new Date().toLocaleString()}`,
              alignment: AlignmentType.CENTER,
              size: 20,
              color: "888888",
            }),
          ],
        }],
      });

      // Generate the DOCX file
      const blob = await Packer.toBlob(doc);
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `${quizData?.title || 'quiz'}-answer-key.docx`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    }
  };

  // Generate CSV format
  
  const handlePDFDownload = async () => {
    setLoadingFormat('pdf');
    handleMenuClose();
    
    try {
      generateCombinedPDF();
      showSnackbar('PDF generated! Quiz sheet with answer key ready for download.');
      setLoadingFormat(null);
    } catch (error) {
      console.error('PDF generation failed:', error);
      showSnackbar('Failed to generate PDF file', 'error');
      setLoadingFormat(null);
    }
  };

 

  const handleDOCXDownload = async () => {
    setLoadingFormat('docx');
    handleMenuClose();
    
    try {
      await generateQuizSheet('docx');
      setTimeout(async () => {
        await generateAnswerKey('docx');
        showSnackbar('DOCX files downloaded! Quiz sheet and answer key saved separately.');
        setLoadingFormat(null);
      }, 1000);
    } catch (error) {
      console.error('DOCX generation failed:', error);
      showSnackbar('Failed to generate DOCX files', 'error');
      setLoadingFormat(null);
    }
  };

  // Generate Combined PDF (Quiz + Answer Key)
  const generateCombinedPDF = () => {
    const quizTitle = quizData?.title || 'Quiz Sheet';
    const date = new Date().toLocaleDateString();
    
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>${quizTitle} - Complete</title>
        <style>
          ${getWatermarkStyle()}
          @media print { 
            @page { 
              margin: 1in; 
              @bottom-center {
                content: "Generated by QuizAi - ${new Date().toLocaleDateString()}";
                font-size: 10pt;
                color: #888;
              }
            }
            .page-break { page-break-before: always; }
          }
          body { 
            font-family: 'Arial', sans-serif; 
            line-height: 1.6; 
            color: #333; 
            max-width: 100%; 
            margin: 0; 
            padding: 20px;
            position: relative;
          }
          .watermark {
            display: block;
          }
          .header { 
            text-align: center; 
            margin-bottom: 30px; 
            border-bottom: 2px solid #3f51b5;
            padding-bottom: 15px;
          }
          .title { 
            font-size: 28px; 
            font-weight: bold; 
            margin-bottom: 10px;
            color: #3f51b5;
          }
          .answer-key-title {
            color: #d32f2f;
          }
          .info { 
            font-size: 16px; 
            margin: 8px 0;
            color: #555;
          }
          .instructions {
            background: #f0f4ff;
            border: 1px solid #c5cae9;
            padding: 20px;
            margin: 20px 0;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
          }
          .question { 
            margin: 30px 0; 
            page-break-inside: avoid;
            clear: both;
            padding: 15px;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            background: #fff;
          }
          .question-header { 
            font-weight: bold; 
            margin-bottom: 12px; 
            font-size: 18px;
            color: #333;
          }
          .options { 
            margin-left: 20px;
            line-height: 1.8;
          }
          .option { 
            margin: 10px 0;
            display: block;
          }
          .option-letter {
            font-weight: bold;
            margin-right: 8px;
            color: #3f51b5;
          }
          .answer-line {
            margin-top: 20px;
            border-bottom: 2px dotted #ccc;
            min-height: 28px;
            padding: 5px 0;
            font-weight: bold;
            color: #333;
          }
          .warning {
            color: #d32f2f;
            font-weight: bold;
            background: #ffebee;
            padding: 10px;
            border-radius: 5px;
            text-align: center;
            margin: 20px 0;
            border: 1px solid #ffcdd2;
          }
          .answer-grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 12px;
            margin: 25px 0;
            padding: 20px;
            border: 2px solid #d32f2f;
            border-radius: 8px;
            background: #fff;
          }
          .answer-item {
            text-align: center;
            font-weight: bold;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            background: #f5f5f5;
          }
          .question-number {
            font-size: 14px;
            color: #777;
          }
          .detailed-answers {
            margin-top: 40px;
          }
          .section-title {
            font-size: 22px;
            font-weight: bold;
            color: #333;
            border-bottom: 2px solid #3f51b5;
            padding-bottom: 10px;
            margin-bottom: 20px;
          }
          .question-answer { 
            margin: 20px 0; 
            padding: 20px;
            border-left: 5px solid #4caf50;
            background: #f1f8e9;
            border-radius: 8px;
            page-break-inside: avoid;
          }
          .question-text { 
            font-weight: bold; 
            margin-bottom: 12px; 
            font-size: 18px;
            color: #333;
          }
          .correct-answer { 
            color: #2e7d32; 
            font-weight: bold;
            font-size: 16px;
            margin: 10px 0;
          }
          .explanation { 
            margin-top: 12px; 
            font-style: italic; 
            color: #555;
            padding: 12px;
            background: #e8f5e9;
            border-radius: 4px;
          }
          .footer { 
            margin-top: 40px; 
            text-align: center; 
            font-size: 12px;
            color: #888;
            border-top: 1px solid #eee;
            padding-top: 15px;
          }
        </style>
      </head>
      <body>
        <div class="watermark">QuizAi</div>
        
        <!-- QUIZ SHEET SECTION -->
        <div class="header">
          <div class="title">${quizTitle}</div>
          <div class="info">Date: ${date}</div>
          <div class="info">Total Questions: ${questions.length}</div>
          <div class="info">Name: _________________________ Class: _________</div>
        </div>
        
        <div class="instructions">
          <strong style="font-size: 18px; color: #3f51b5;">Instructions:</strong>
          <ul style="margin: 15px 0; padding-left: 20px;">
            <li style="margin-bottom: 8px;">Read each question carefully</li>
            <li style="margin-bottom: 8px;">Choose the best answer for each multiple choice question</li>
            <li style="margin-bottom: 8px;">Mark your answer clearly</li>
            <li>Use the answer line provided for each question</li>
          </ul>
        </div>
        
        ${questions.map((question, index) => `
          <div class="question">
            <div class="question-header">
              ${index + 1}. ${question.question}
            </div>
            <div class="options">
              ${question.options?.map((option, optionIndex) => 
                `<div class="option">
                  <span class="option-letter">${String.fromCharCode(65 + optionIndex)}.</span> ${option}
                </div>`
              ).join('') || ''}
            </div>
            <div class="answer-line">
              Answer: _________________________________________
            </div>
          </div>
        `).join('')}
        
        <!-- ANSWER KEY SECTION -->
        <div class="page-break">
          <div class="header">
            <div class="title answer-key-title">${quizTitle} - Answer Key</div>
            <div class="info">Date: ${date}</div>
            <div class="info">Total Questions: ${questions.length}</div>
            <div class="warning">⚠️ TEACHER'S ANSWER KEY - DO NOT DISTRIBUTE TO STUDENTS ⚠️</div>
          </div>
          
          <div class="answer-grid">
            ${questions.map((question, index) => `
              <div class="answer-item">
                <div class="question-number">${index + 1}</div>
                ${String.fromCharCode(65 + question.correctAnswer)}
              </div>
            `).join('')}
          </div>
          
          <div class="detailed-answers">
            <div class="section-title">Detailed Answers & Explanations</div>
            ${questions.map((question, index) => `
              <div class="question-answer">
                <div class="question-text">
                  ${index + 1}. ${question.question}
                </div>
                <div class="correct-answer">
                  ✅ Correct Answer: ${String.fromCharCode(65 + question.correctAnswer)}. ${question.options[question.correctAnswer]}
                </div>
                ${question.explanation ? `
                  <div class="explanation">
                    💡 Explanation: ${question.explanation}
                  </div>
                ` : ''}
              </div>
            `).join('')}
          </div>
          
          <div class="footer warning">
            ⚠️ TEACHER'S ANSWER KEY - DO NOT DISTRIBUTE TO STUDENTS ⚠️<br>
            Generated by QuizAi on ${new Date().toLocaleString()} | www.quizai.com
          </div>
        </div>
      </body>
      </html>
    `;

    const printWindow = window.open('', '_blank');
    printWindow.document.write(htmlContent);
    printWindow.document.close();
    
    setTimeout(() => {
      printWindow.print();
    }, 500);
  };

  // Get loading state for specific format
  const isLoading = (format) => loadingFormat === format;

  return (
    <>
      <Zoom in={true} style={{ transitionDelay: '100ms' }}>
        <Button
          variant={variant}
          size={size}
          fullWidth={fullWidth}
          startIcon={loading ? <CircularProgress size={20} /> : <DownloadIcon />}
          onClick={handleMenuOpen}
          disabled={loading || questions.length === 0}
          sx={{ 
            px: 4, 
            py: 1.5,
            background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',
            color: 'white',
            boxShadow: '0 3px 5px 2px rgba(33, 150, 243, .3)',
            '&:hover': {
              background: 'linear-gradient(45deg, #1976D2 30%, #03A9F4 90%)',
            }
          }}
        >
          {loading ? 'Generating...' : 'Download Quiz'}
        </Button>
      </Zoom>

      <Menu
        anchorEl={anchorEl}
        open={Boolean(anchorEl)}
        onClose={handleMenuClose}
        PaperProps={{
          sx: {
            borderRadius: 2,
            minWidth: 280,
            boxShadow: '0 8px 32px rgba(0,0,0,0.15)',
            mt: 1,
          }
        }}
        TransitionComponent={Fade}
      >
        <MenuItem onClick={handlePDFDownload} disabled={isLoading('pdf')}>
          <ListItemIcon>
            {isLoading('pdf') ? <CircularProgress size={20} /> : <PdfIcon color="error" />}
          </ListItemIcon>
          <ListItemText 
            primary="Download as PDF" 
            secondary="Quiz + Answer Key (Combined)"
          />
        </MenuItem>

        <Divider />

        <MenuItem onClick={handleDOCXDownload} disabled={isLoading('docx')}>
          <ListItemIcon>
            {isLoading('docx') ? <CircularProgress size={20} /> : <DocxIcon color="primary" />}
          </ListItemIcon>
          <ListItemText 
            primary="Download as DOCX" 
            secondary="Quiz + Answer Key (Separate)"
            primaryTypographyProps={{ fontWeight: 'bold' }}
          />
        </MenuItem>
      </Menu>

      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
        TransitionComponent={Fade}
      >
        <Alert 
          onClose={() => setSnackbar({ ...snackbar, open: false })} 
          severity={snackbar.severity}
          variant="filled"
          sx={{ width: '100%' }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </>
  );
};

export default DownloadQuizButton;