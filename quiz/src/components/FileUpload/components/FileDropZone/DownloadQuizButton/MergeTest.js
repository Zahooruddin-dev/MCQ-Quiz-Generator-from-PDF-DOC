// Enhanced Combined PDF Generator
import React from 'react';

const CombinedPDFGenerator = {
  // Generate improved watermark style
  getWatermarkStyle: () => {
    return `
      @media print {
        .watermark {
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%) rotate(-45deg);
          font-size: 8em;
          opacity: 0.08;
          color: #cccccc;
          pointer-events: none;
          z-index: -1;
          font-weight: 300;
          font-family: 'Arial', sans-serif;
          letter-spacing: 0.1em;
          user-select: none;
        }
        
        .watermark-multiple {
          position: fixed;
          width: 100%;
          height: 100%;
          top: 0;
          left: 0;
          pointer-events: none;
          z-index: -1;
          background-image: 
            radial-gradient(circle at 25% 25%, transparent 20px, transparent 20px),
            radial-gradient(circle at 75% 25%, transparent 20px, transparent 20px),
            radial-gradient(circle at 25% 75%, transparent 20px, transparent 20px),
            radial-gradient(circle at 75% 75%, transparent 20px, transparent 20px);
          background-size: 200px 200px;
          opacity: 0.03;
        }
        
        .watermark-multiple::before {
          content: 'QuizAI';
          position: absolute;
          top: 20%;
          left: 20%;
          transform: rotate(-45deg);
          font-size: 3em;
          color: #ddd;
          opacity: 0.5;
        }
        
        .watermark-multiple::after {
          content: 'QuizAI';
          position: absolute;
          bottom: 20%;
          right: 20%;
          transform: rotate(-45deg);
          font-size: 3em;
          color: #ddd;
          opacity: 0.5;
        }
      }
      
      @media screen {
        .watermark {
          display: block;
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%) rotate(-45deg);
          font-size: 6em;
          opacity: 0.05;
          color: #999;
          pointer-events: none;
          z-index: -1;
          font-weight: 300;
          font-family: 'Arial', sans-serif;
        }
      }
    `;
  },

  // Generate Combined PDF (Quiz + Answer Key)
  generate: async (quizData, questions) => {
    const quizTitle = quizData?.title || 'Quiz Sheet';
    const date = new Date().toLocaleDateString();
    
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>${quizTitle} - Complete</title>
        <style>
          ${CombinedPDFGenerator.getWatermarkStyle()}
          @media print { 
            @page { 
              margin: 0.8in; 
              size: A4;
              @top-center {
                content: "";
              }
              @bottom-center {
                content: "Generated by QuizAI - ${new Date().toLocaleDateString()}";
                font-size: 9pt;
                color: #666;
                margin-top: 10pt;
              }
            }
            .page-break { 
              page-break-before: always; 
              page-break-after: auto;
            }
            body { 
              -webkit-print-color-adjust: exact !important;
              color-adjust: exact !important;
              print-color-adjust: exact !important;
            }
          }
          
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }
          
          body { 
            font-family: 'Times New Roman', serif; 
            line-height: 1.8; 
            color: #000; 
            max-width: 100%; 
            margin: 0; 
            padding: 25px;
            position: relative;
            font-size: 14px;
          }
          
          .watermark {
            display: block;
          }
          
          .watermark-multiple {
            display: block;
          }
          
          .exam-header { 
            text-align: center; 
            margin-bottom: 35px; 
            border: 2px solid #000;
            padding: 20px;
            background: #fff;
          }
          
          .institution-name {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 8px;
            text-transform: uppercase;
            letter-spacing: 1px;
          }
          
          .exam-title { 
            font-size: 24px; 
            font-weight: bold; 
            margin: 15px 0;
            text-decoration: underline;
            text-underline-offset: 5px;
          }
          
          .exam-info-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-top: 25px;
            text-align: left;
          }
          
          .exam-info-left, .exam-info-right {
            display: flex;
            flex-direction: column;
            gap: 15px;
          }
          
          .info-row {
            display: flex;
            align-items: center;
            font-size: 16px;
            font-weight: 600;
          }
          
          .info-label {
            min-width: 120px;
            font-weight: bold;
          }
          
          .info-line {
            border-bottom: 2px solid #000;
            min-width: 200px;
            height: 25px;
            margin-left: 10px;
            display: inline-block;
          }
          
          .instructions {
            background: #f8f9fa;
            border: 2px solid #333;
            padding: 20px;
            margin: 25px 0;
            border-radius: 5px;
          }
          
          .instructions-title {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 15px;
            text-align: center;
            text-decoration: underline;
          }
          
          .instructions-list {
            list-style: none;
            counter-reset: instruction-counter;
          }
          
          .instructions-list li {
            counter-increment: instruction-counter;
            margin-bottom: 8px;
            padding-left: 30px;
            position: relative;
          }
          
          .instructions-list li::before {
            content: counter(instruction-counter) ".";
            position: absolute;
            left: 0;
            font-weight: bold;
          }
          
          .question-container { 
            margin: 35px 0; 
            page-break-inside: avoid;
            border: 1px solid #ddd;
            padding: 20px;
            border-radius: 5px;
            background: #fff;
          }
          
          .question-number { 
            font-weight: bold; 
            font-size: 18px;
            margin-bottom: 12px;
            color: #000;
          }
          
          .question-text {
            margin-bottom: 15px;
            line-height: 1.6;
            font-size: 15px;
          }
          
          .context {
            font-style: italic;
            color: #444;
            margin: 15px 0;
            padding: 15px;
            background: #f5f5f5;
            border-left: 4px solid #666;
            border-radius: 3px;
          }
          
          .options-container { 
            margin: 20px 0;
            padding-left: 0;
          }
          
          .option-item { 
            margin: 12px 0;
            display: flex;
            align-items: flex-start;
            line-height: 1.6;
          }
          
          .option-letter {
            font-weight: bold;
            margin-right: 12px;
            min-width: 25px;
            font-size: 15px;
          }
          
          .option-text {
            flex: 1;
          }
          
          .answer-section {
            margin-top: 25px;
            padding-top: 15px;
            border-top: 2px dotted #666;
          }
          
          .answer-label {
            font-weight: bold;
            font-size: 16px;
            margin-bottom: 10px;
          }
          
          .answer-line {
            border-bottom: 2px solid #000;
            min-height: 30px;
            width: 100%;
            margin-bottom: 10px;
          }
          
          /* Answer Key Specific Styles */
          .answer-key-header {
            background: #fff3cd;
            border: 3px solid #ff6b35;
          }
          
          .warning-banner {
            color: #721c24;
            font-weight: bold;
            background: #f8d7da;
            padding: 15px;
            border-radius: 5px;
            text-align: center;
            margin: 20px 0;
            border: 2px solid #f5c6cb;
            font-size: 16px;
          }
          
          .quick-answers {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
            gap: 15px;
            margin: 30px 0;
            padding: 25px;
            border: 3px solid #dc3545;
            border-radius: 8px;
            background: #fff;
          }
          
          .answer-bubble {
            text-align: center;
            font-weight: bold;
            padding: 15px 10px;
            border: 2px solid #666;
            border-radius: 8px;
            background: #f8f9fa;
            min-height: 60px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
          }
          
          .bubble-number {
            font-size: 12px;
            color: #666;
            margin-bottom: 5px;
          }
          
          .bubble-answer {
            font-size: 18px;
            font-weight: bold;
            color: #000;
          }
          
          .detailed-section {
            margin-top: 40px;
          }
          
          .section-header {
            font-size: 20px;
            font-weight: bold;
            color: #000;
            border-bottom: 3px solid #333;
            padding-bottom: 10px;
            margin-bottom: 25px;
            text-align: center;
          }
          
          .detailed-answer { 
            margin: 25px 0; 
            padding: 20px;
            border-left: 5px solid #28a745;
            background: #f8fff9;
            border-radius: 5px;
            page-break-inside: avoid;
          }
          
          .detailed-question { 
            font-weight: bold; 
            margin-bottom: 15px; 
            font-size: 16px;
          }
          
          .correct-answer-text { 
            color: #155724; 
            font-weight: bold;
            font-size: 15px;
            margin: 12px 0;
            padding: 10px;
            background: #d4edda;
            border-radius: 3px;
          }
          
          .explanation-text { 
            margin-top: 15px; 
            font-style: italic; 
            color: #333;
            padding: 15px;
            background: #e8f5e9;
            border-radius: 3px;
            line-height: 1.6;
          }
          
          .footer-section { 
            margin-top: 50px; 
            text-align: center; 
            font-size: 11px;
            color: #666;
            border-top: 2px solid #ddd;
            padding-top: 20px;
          }
          
          .confidential-footer {
            background: #f8d7da;
            color: #721c24;
            font-weight: bold;
            padding: 15px;
            border: 2px solid #f5c6cb;
            border-radius: 5px;
            margin-bottom: 15px;
          }
        </style>
      </head>
      <body>
        <div class="watermark">QuizAI</div>
        <div class="watermark-multiple"></div>
        
        <!-- QUIZ SHEET SECTION -->
        <div class="exam-header">
          <div class="institution-name">[Institution/School Name]</div>
          <div class="exam-title">${quizTitle}</div>
          
          <div class="exam-info-grid">
            <div class="exam-info-left">
              <div class="info-row">
                <span class="info-label">Name:</span>
                <span class="info-line"></span>
              </div>
              <div class="info-row">
                <span class="info-label">Class/Grade:</span>
                <span class="info-line"></span>
              </div>
            </div>
            <div class="exam-info-right">
              <div class="info-row">
                <span class="info-label">Date:</span>
                <span class="info-line"></span>
              </div>
              <div class="info-row">
                <span class="info-label">Roll No.:</span>
                <span class="info-line"></span>
              </div>
            </div>
          </div>
          
          <div style="margin-top: 20px; font-weight: bold;">
            Total Questions: ${questions.length} | Total Marks: ${questions.length} | Time: _____ minutes
          </div>
        </div>
        
        <div class="instructions">
          <div class="instructions-title">INSTRUCTIONS</div>
          <ul class="instructions-list">
            <li>Read each question carefully before attempting</li>
            <li>Choose the best answer for each multiple choice question</li>
            <li>Write your answer clearly in the space provided</li>
            <li>Use only black or blue ink pen</li>
            <li>Do not use pencil or correction fluid</li>
            <li>Check your answers before submitting</li>
          </ul>
        </div>
        
        ${questions.map((question, index) => `
          <div class="question-container">
            <div class="question-number">
              Q.${index + 1}
            </div>
            <div class="question-text">
              ${question.question}
            </div>
            ${question.context ? `
              <div class="context">
                <strong>Context:</strong> ${question.context}
              </div>
            ` : ''}
            <div class="options-container">
              ${question.options?.map((option, optionIndex) => `
                <div class="option-item">
                  <span class="option-letter">(${String.fromCharCode(65 + optionIndex)})</span>
                  <span class="option-text">${option}</span>
                </div>
              `).join('') || ''}
            </div>
            <div class="answer-section">
              <div class="answer-label">Answer:</div>
              <div class="answer-line"></div>
            </div>
          </div>
        `).join('')}
        
        <!-- ANSWER KEY SECTION -->
        <div class="page-break">
          <div class="exam-header answer-key-header">
            <div class="institution-name">[Institution/School Name]</div>
            <div class="exam-title">${quizTitle} - ANSWER KEY</div>
            <div style="margin-top: 15px; font-weight: bold;">
              Date: ${date} | Total Questions: ${questions.length}
            </div>
            <div class="warning-banner">
              ⚠️ CONFIDENTIAL - TEACHER'S ANSWER KEY - DO NOT DISTRIBUTE TO STUDENTS ⚠️
            </div>
          </div>
          
          <div class="quick-answers">
            ${questions.map((question, index) => `
              <div class="answer-bubble">
                <div class="bubble-number">Q.${index + 1}</div>
                <div class="bubble-answer">${String.fromCharCode(65 + question.correctAnswer)}</div>
              </div>
            `).join('')}
          </div>
          
          <div class="detailed-section">
            <div class="section-header">DETAILED ANSWERS & EXPLANATIONS</div>
            ${questions.map((question, index) => `
              <div class="detailed-answer">
                <div class="detailed-question">
                  Q.${index + 1}: ${question.question}
                </div>
                <div class="correct-answer-text">
                  ✅ Correct Answer: (${String.fromCharCode(65 + question.correctAnswer)}) ${question.options[question.correctAnswer]}
                </div>
                ${question.explanation ? `
                  <div class="explanation-text">
                    💡 <strong>Explanation:</strong> ${question.explanation}
                  </div>
                ` : ''}
              </div>
            `).join('')}
          </div>
          
          <div class="footer-section">
            <div class="confidential-footer">
              ⚠️ CONFIDENTIAL DOCUMENT - FOR AUTHORIZED PERSONNEL ONLY ⚠️
            </div>
            <div>
              Generated by QuizAI on ${new Date().toLocaleString()} | Professional Quiz Generation Platform
            </div>
          </div>
        </div>
      </body>
      </html>
    `;

    const printWindow = window.open('', '_blank');
    printWindow.document.write(htmlContent);
    printWindow.document.close();
    
    setTimeout(() => {
      printWindow.print();
    }, 500);
  }
};

// Enhanced Quiz Sheet Generator
const QuizSheetGenerator = {
  getWatermarkStyle: () => {
    return CombinedPDFGenerator.getWatermarkStyle();
  },

  generatePDF: async (quizData, questions) => {
    const quizTitle = quizData?.title || 'Quiz Sheet';
    const date = new Date().toLocaleDateString();
    
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>${quizTitle}</title>
        <style>
          ${QuizSheetGenerator.getWatermarkStyle()}
          @media print { 
            @page { 
              margin: 0.8in; 
              size: A4;
              @bottom-center {
                content: "Generated by QuizAI - ${new Date().toLocaleDateString()}";
                font-size: 9pt;
                color: #666;
                margin-top: 10pt;
              }
            }
            body { 
              -webkit-print-color-adjust: exact !important;
              color-adjust: exact !important;
              print-color-adjust: exact !important;
            }
          }
          
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }
          
          body { 
            font-family: 'Times New Roman', serif; 
            line-height: 1.8; 
            color: #000; 
            max-width: 100%; 
            margin: 0; 
            padding: 25px;
            position: relative;
            font-size: 14px;
          }
          
          .watermark {
            display: block;
          }
          
          .watermark-multiple {
            display: block;
          }
          
          .exam-header { 
            text-align: center; 
            margin-bottom: 35px; 
            border: 2px solid #000;
            padding: 20px;
            background: #fff;
          }
          
          .institution-name {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 8px;
            text-transform: uppercase;
            letter-spacing: 1px;
          }
          
          .exam-title { 
            font-size: 24px; 
            font-weight: bold; 
            margin: 15px 0;
            text-decoration: underline;
            text-underline-offset: 5px;
          }
          
          .exam-info-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-top: 25px;
            text-align: left;
          }
          
          .exam-info-left, .exam-info-right {
            display: flex;
            flex-direction: column;
            gap: 15px;
          }
          
          .info-row {
            display: flex;
            align-items: center;
            font-size: 16px;
            font-weight: 600;
          }
          
          .info-label {
            min-width: 120px;
            font-weight: bold;
          }
          
          .info-line {
            border-bottom: 2px solid #000;
            min-width: 200px;
            height: 25px;
            margin-left: 10px;
            display: inline-block;
          }
          
          .instructions {
            background: #f8f9fa;
            border: 2px solid #333;
            padding: 20px;
            margin: 25px 0;
            border-radius: 5px;
          }
          
          .instructions-title {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 15px;
            text-align: center;
            text-decoration: underline;
          }
          
          .instructions-list {
            list-style: none;
            counter-reset: instruction-counter;
          }
          
          .instructions-list li {
            counter-increment: instruction-counter;
            margin-bottom: 8px;
            padding-left: 30px;
            position: relative;
          }
          
          .instructions-list li::before {
            content: counter(instruction-counter) ".";
            position: absolute;
            left: 0;
            font-weight: bold;
          }
          
          .question-container { 
            margin: 35px 0; 
            page-break-inside: avoid;
            border: 1px solid #ddd;
            padding: 20px;
            border-radius: 5px;
            background: #fff;
          }
          
          .question-number { 
            font-weight: bold; 
            font-size: 18px;
            margin-bottom: 12px;
            color: #000;
          }
          
          .question-text {
            margin-bottom: 15px;
            line-height: 1.6;
            font-size: 15px;
          }
          
          .context {
            font-style: italic;
            color: #444;
            margin: 15px 0;
            padding: 15px;
            background: #f5f5f5;
            border-left: 4px solid #666;
            border-radius: 3px;
          }
          
          .options-container { 
            margin: 20px 0;
            padding-left: 0;
          }
          
          .option-item { 
            margin: 12px 0;
            display: flex;
            align-items: flex-start;
            line-height: 1.6;
          }
          
          .option-letter {
            font-weight: bold;
            margin-right: 12px;
            min-width: 25px;
            font-size: 15px;
          }
          
          .option-text {
            flex: 1;
          }
          
          .answer-section {
            margin-top: 25px;
            padding-top: 15px;
            border-top: 2px dotted #666;
          }
          
          .answer-label {
            font-weight: bold;
            font-size: 16px;
            margin-bottom: 10px;
          }
          
          .answer-line {
            border-bottom: 2px solid #000;
            min-height: 30px;
            width: 100%;
            margin-bottom: 10px;
          }
          
          .footer-section { 
            margin-top: 50px; 
            text-align: center; 
            font-size: 11px;
            color: #666;
            border-top: 2px solid #ddd;
            padding-top: 20px;
          }
        </style>
      </head>
      <body>
        <div class="watermark">QuizAI</div>
        <div class="watermark-multiple"></div>
        
        <div class="exam-header">
          <div class="institution-name">[Institution/School Name]</div>
          <div class="exam-title">${quizTitle}</div>
          
          <div class="exam-info-grid">
            <div class="exam-info-left">
              <div class="info-row">
                <span class="info-label">Name:</span>
                <span class="info-line"></span>
              </div>
              <div class="info-row">
                <span class="info-label">Class/Grade:</span>
                <span class="info-line"></span>
              </div>
            </div>
            <div class="exam-info-right">
              <div class="info-row">
                <span class="info-label">Date:</span>
                <span class="info-line"></span>
              </div>
              <div class="info-row">
                <span class="info-label">Roll No.:</span>
                <span class="info-line"></span>
              </div>
            </div>
          </div>
          
          <div style="margin-top: 20px; font-weight: bold;">
            Total Questions: ${questions.length} | Total Marks: ${questions.length} | Time: _____ minutes
          </div>
        </div>
        
        <div class="instructions">
          <div class="instructions-title">INSTRUCTIONS</div>
          <ul class="instructions-list">
            <li>Read each question carefully before attempting</li>
            <li>Choose the best answer for each multiple choice question</li>
            <li>Write your answer clearly in the space provided</li>
            <li>Use only black or blue ink pen</li>
            <li>Do not use pencil or correction fluid</li>
            <li>Check your answers before submitting</li>
          </ul>
        </div>
        
        ${questions.map((question, index) => `
          <div class="question-container">
            <div class="question-number">
              Q.${index + 1}
            </div>
            <div class="question-text">
              ${question.question}
            </div>
            ${question.context ? `
              <div class="context">
                <strong>Context:</strong> ${question.context}
              </div>
            ` : ''}
            <div class="options-container">
              ${question.options?.map((option, optionIndex) => `
                <div class="option-item">
                  <span class="option-letter">(${String.fromCharCode(65 + optionIndex)})</span>
                  <span class="option-text">${option}</span>
                </div>
              `).join('') || ''}
            </div>
            <div class="answer-section">
              <div class="answer-label">Answer:</div>
              <div class="answer-line"></div>
            </div>
          </div>
        `).join('')}
        
        <div class="footer-section">
          <div>
            Quiz Generated by QuizAI on ${new Date().toLocaleString()} | Professional Quiz Generation Platform
          </div>
        </div>
      </body>
      </html>
    `;

    const printWindow = window.open('', '_blank');
    printWindow.document.write(htmlContent);
    printWindow.document.close();
    
    setTimeout(() => {
      printWindow.print();
    }, 500);
  },

  // Enhanced TXT and DOCX methods remain similar but with improved formatting
  generateTXT: async (quizData, questions) => {
    const quizTitle = quizData?.title || 'Quiz Sheet';
    const date = new Date().toLocaleDateString();

    let content = `${'='.repeat(80)}\n`;
    content += `${quizTitle.toUpperCase()}\n`;
    content += `${'='.repeat(80)}\n\n`;
    
    content += `Institution/School Name: _________________________________\n\n`;
    
    content += `Name: ____________________________  Class/Grade: ______________\n\n`;
    content += `Date: ____________________________  Roll No.: ________________\n\n`;
    content += `Total Questions: ${questions.length}     Total Marks: ${questions.length}     Time: _______ minutes\n\n`;
    
    content += `${'='.repeat(80)}\n`;
    content += `INSTRUCTIONS:\n`;
    content += `${'='.repeat(80)}\n`;
    content += `1. Read each question carefully before attempting\n`;
    content += `2. Choose the best answer for each multiple choice question\n`;
    content += `3. Write your answer clearly in the space provided\n`;
    content += `4. Use only black or blue ink pen\n`;
    content += `5. Do not use pencil or correction fluid\n`;
    content += `6. Check your answers before submitting\n\n`;
    
    content += `${'-'.repeat(80)}\n\n`;
    
    questions.forEach((question, index) => {
      content += `Q.${index + 1} ${question.question}\n`;
      if (question.context) {
        content += `     [Context: ${question.context}]\n`;
      }
      question.options?.forEach((option, optionIndex) => {
        content += `     (${String.fromCharCode(65 + optionIndex)}) ${option}\n`;
      });
      content += `\n     Answer: ________________________________________________\n\n`;
      content += `${'-'.repeat(40)}\n\n`;
    });
    
    content += `\nGenerated by QuizAI on ${new Date().toLocaleString()}\n`;
    content += `Professional Quiz Generation Platform\n`;
    
    const blob = new Blob([content], { type: 'text/plain;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `${quizData?.title || 'quiz'}-sheet.txt`;
    link.click();
    URL.revokeObjectURL(link.href);
  },

  generateDOCX: async (quizData, questions) => {
    const { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType, BorderStyle, Table, TableRow, TableCell, WidthType } = await import('docx');
    
    const doc = new Document({
      sections: [{
        properties: {
          page: {
            margin: {
              top: 1134, // 0.8 inch in twentieths of a point
              right: 1134,
              bottom: 1134,
              left: 1134,
            },
          },
        },
        children: [
          // Header Section
          new Paragraph({
            children: [
              new TextRun({
                text: "[Institution/School Name]",
                bold: true,
                size: 32,
              }),
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 200 },
          }),
          
          new Paragraph({
            children: [
              new TextRun({
                text: quizData?.title || "Quiz Sheet",
                bold: true,
                size: 44,
                underline: {},
              }),
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 400 },
          }),
          
          // Student Info Table
          new Table({
            rows: [
              new TableRow({
                children: [
                  new TableCell({
                    children: [new Paragraph({
                      children: [new TextRun({ text: "Name: ________________________", size: 24 })]
                    })],
                    width: { size: 50, type: WidthType.PERCENTAGE },
                  }),
                  new TableCell({
                    children: [new Paragraph({
                      children: [new TextRun({ text: "Date: ________________________", size: 24 })]
                    })],
                    width: { size: 50, type: WidthType.PERCENTAGE },
                  }),
                ],
              }),
              new TableRow({
                children: [
                  new TableCell({
                    children: [new Paragraph({
                      children: [new TextRun({ text: "Class/Grade: __________________", size: 24 })]
                    })],
                  }),
                  new TableCell({
                    children: [new Paragraph({
                      children: [new TextRun({ text: "Roll No.: _____________________", size: 24 })]
                    })],
                  }),
                ],
              }),
            ],
            width: { size: 100, type: WidthType.PERCENTAGE },
          }),
          
          new Paragraph({
            children: [
              new TextRun({
                text: `Total Questions: ${questions.length} | Total Marks: ${questions.length} | Time: _______ minutes`,
                bold: true,
                size: 24,
              }),
            ],
            alignment: AlignmentType.CENTER,
            spacing: { before: 400, after: 600 },
          }),
          
          // Instructions Section
          new Paragraph({
            children: [
              new TextRun({
                text: "INSTRUCTIONS",
                bold: true,
                size: 32,
                underline: {},
              }),
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 300 },
          }),
          
          new Paragraph({
            text: "1. Read each question carefully before attempting",
            numbering: { reference: "instructions", level: 0 },
            spacing: { after: 150 },
          }),
          new Paragraph({
            text: "2. Choose the best answer for each multiple choice question",
            spacing: { after: 150 },
          }),
          new Paragraph({
            text: "3. Write your answer clearly in the space provided",
            spacing: { after: 150 },
          }),
          new Paragraph({
            text: "4. Use only black or blue ink pen",
            spacing: { after: 150 },
          }),
          new Paragraph({
            text: "5. Do not use pencil or correction fluid",
            spacing: { after: 150 },
          }),
          new Paragraph({
            text: "6. Check your answers before submitting",
            spacing: { after: 600 },
          }),
          
          // Questions
          ...questions.flatMap((question, index) => [
            new Paragraph({
              children: [
                new TextRun({
                  text: `Q.${index + 1} ${question.question}`,
                  bold: true,
                  size: 26,
                }),
              ],
              spacing: { before: 400, after: 200 },
              border: {
                top: { style: BorderStyle.SINGLE, size: 1, color: "CCCCCC" },
                bottom: { style: BorderStyle.SINGLE, size: 1, color: "CCCCCC" },
                left: { style: BorderStyle.SINGLE, size: 1, color: "CCCCCC" },
                right: { style: BorderStyle.SINGLE, size: 1, color: "CCCCCC" },
              },
            }),
            
            ...(question.context ? [
              new Paragraph({
                children: [
                  new TextRun({
                    text: `Context: ${question.context}`,
                    italics: true,
                    size: 22,
                  }),
                ],
                spacing: { after: 200 },
                indent: { left: 400 },
              })
            ] : []),
            
            ...(question.options?.map((option, optionIndex) => 
              new Paragraph({
                children: [
                  new TextRun({
                    text: `(${String.fromCharCode(65 + optionIndex)}) ${option}`,
                    size: 22,
                  }),
                ],
                indent: { left: 600 },
                spacing: { after: 150 },
              })
            ) || []),
            
            new Paragraph({
              children: [
                new TextRun({
                  text: "Answer: ________________________________________________",
                  bold: true,
                  size: 24,
                }),
              ],
              spacing: { before: 300, after: 200 },
            }),
          ]),
          
          // Footer
          new Paragraph({
            children: [
              new TextRun({
                text: `Generated by QuizAI on ${new Date().toLocaleString()}`,
                size: 18,
                color: "666666",
              }),
            ],
            alignment: AlignmentType.CENTER,
            spacing: { before: 800 },
          }),
          new Paragraph({
            children: [
              new TextRun({
                text: "Professional Quiz Generation Platform",
                size: 18,
                color: "666666",
              }),
            ],
            alignment: AlignmentType.CENTER,
          }),
        ],
      }],
    });

    const blob = await Packer.toBlob(doc);
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${quizData?.title || 'quiz'}-sheet.docx`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }
};

// Enhanced Answer Key Generator
const AnswerKeyGenerator = {
  getWatermarkStyle: () => {
    return CombinedPDFGenerator.getWatermarkStyle();
  },

  generatePDF: async (quizData, questions) => {
    const quizTitle = quizData?.title || 'Quiz';
    const date = new Date().toLocaleDateString();
    
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>${quizTitle} - Answer Key</title>
        <style>
          ${AnswerKeyGenerator.getWatermarkStyle()}
          @media print { 
            @page { 
              margin: 0.8in; 
              size: A4;
              @bottom-center {
                content: "Generated by QuizAI - ${new Date().toLocaleDateString()}";
                font-size: 9pt;
                color: #666;
                margin-top: 10pt;
              }
            }
            body { 
              -webkit-print-color-adjust: exact !important;
              color-adjust: exact !important;
              print-color-adjust: exact !important;
            }
          }
          
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }
          
          body { 
            font-family: 'Times New Roman', serif; 
            line-height: 1.8; 
            color: #000; 
            max-width: 100%; 
            margin: 0; 
            padding: 25px;
            position: relative;
            font-size: 14px;
          }
          
          .watermark {
            display: block;
          }
          
          .watermark-multiple {
            display: block;
          }
          
          .answer-key-header {
            background: #fff3cd;
            border: 3px solid #ff6b35;
            text-align: center; 
            margin-bottom: 35px; 
            padding: 20px;
          }
          
          .institution-name {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 8px;
            text-transform: uppercase;
            letter-spacing: 1px;
          }
          
          .answer-key-title { 
            font-size: 24px; 
            font-weight: bold; 
            margin: 15px 0;
            color: #dc3545;
            text-decoration: underline;
            text-underline-offset: 5px;
          }
          
          .warning-banner {
            color: #721c24;
            font-weight: bold;
            background: #f8d7da;
            padding: 15px;
            border-radius: 5px;
            text-align: center;
            margin: 20px 0;
            border: 2px solid #f5c6cb;
            font-size: 16px;
          }
          
          .quick-answers {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
            gap: 15px;
            margin: 30px 0;
            padding: 25px;
            border: 3px solid #dc3545;
            border-radius: 8px;
            background: #fff;
          }
          
          .answer-bubble {
            text-align: center;
            font-weight: bold;
            padding: 15px 10px;
            border: 2px solid #666;
            border-radius: 8px;
            background: #f8f9fa;
            min-height: 60px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
          }
          
          .bubble-number {
            font-size: 12px;
            color: #666;
            margin-bottom: 5px;
          }
          
          .bubble-answer {
            font-size: 18px;
            font-weight: bold;
            color: #000;
          }
          
          .detailed-section {
            margin-top: 40px;
          }
          
          .section-header {
            font-size: 20px;
            font-weight: bold;
            color: #000;
            border-bottom: 3px solid #333;
            padding-bottom: 10px;
            margin-bottom: 25px;
            text-align: center;
          }
          
          .detailed-answer { 
            margin: 25px 0; 
            padding: 20px;
            border-left: 5px solid #28a745;
            background: #f8fff9;
            border-radius: 5px;
            page-break-inside: avoid;
          }
          
          .detailed-question { 
            font-weight: bold; 
            margin-bottom: 15px; 
            font-size: 16px;
          }
          
          .correct-answer-text { 
            color: #155724; 
            font-weight: bold;
            font-size: 15px;
            margin: 12px 0;
            padding: 10px;
            background: #d4edda;
            border-radius: 3px;
          }
          
          .explanation-text { 
            margin-top: 15px; 
            font-style: italic; 
            color: #333;
            padding: 15px;
            background: #e8f5e9;
            border-radius: 3px;
            line-height: 1.6;
          }
          
          .footer-section { 
            margin-top: 50px; 
            text-align: center; 
            font-size: 11px;
            color: #666;
            border-top: 2px solid #ddd;
            padding-top: 20px;
          }
          
          .confidential-footer {
            background: #f8d7da;
            color: #721c24;
            font-weight: bold;
            padding: 15px;
            border: 2px solid #f5c6cb;
            border-radius: 5px;
            margin-bottom: 15px;
          }
        </style>
      </head>
      <body>
        <div class="watermark">QuizAI</div>
        <div class="watermark-multiple"></div>
        
        <div class="answer-key-header">
          <div class="institution-name">[Institution/School Name]</div>
          <div class="answer-key-title">${quizTitle} - ANSWER KEY</div>
          <div style="margin-top: 15px; font-weight: bold;">
            Date: ${date} | Total Questions: ${questions.length}
          </div>
          <div class="warning-banner">
            ⚠️ CONFIDENTIAL - TEACHER'S ANSWER KEY - DO NOT DISTRIBUTE TO STUDENTS ⚠️
          </div>
        </div>
        
        <div class="quick-answers">
          ${questions.map((question, index) => `
            <div class="answer-bubble">
              <div class="bubble-number">Q.${index + 1}</div>
              <div class="bubble-answer">${String.fromCharCode(65 + question.correctAnswer)}</div>
            </div>
          `).join('')}
        </div>
        
        <div class="detailed-section">
          <div class="section-header">DETAILED ANSWERS & EXPLANATIONS</div>
          ${questions.map((question, index) => `
            <div class="detailed-answer">
              <div class="detailed-question">
                Q.${index + 1}: ${question.question}
              </div>
              <div class="correct-answer-text">
                ✅ Correct Answer: (${String.fromCharCode(65 + question.correctAnswer)}) ${question.options[question.correctAnswer]}
              </div>
              ${question.explanation ? `
                <div class="explanation-text">
                  💡 <strong>Explanation:</strong> ${question.explanation}
                </div>
              ` : ''}
            </div>
          `).join('')}
        </div>
        
        <div class="footer-section">
          <div class="confidential-footer">
            ⚠️ CONFIDENTIAL DOCUMENT - FOR AUTHORIZED PERSONNEL ONLY ⚠️
          </div>
          <div>
            Generated by QuizAI on ${new Date().toLocaleString()} | Professional Quiz Generation Platform
          </div>
        </div>
      </body>
      </html>
    `;

    const printWindow = window.open('', '_blank');
    printWindow.document.write(htmlContent);
    printWindow.document.close();
    
    setTimeout(() => {
      printWindow.print();
    }, 500);
  },

  generateTXT: async (quizData, questions) => {
    const quizTitle = quizData?.title || 'Quiz';
    const date = new Date().toLocaleDateString();

    let content = `${'='.repeat(80)}\n`;
    content += `${quizTitle.toUpperCase()} - ANSWER KEY\n`;
    content += `${'='.repeat(80)}\n\n`;
    content += `⚠️ CONFIDENTIAL - TEACHER'S ANSWER KEY - DO NOT DISTRIBUTE TO STUDENTS ⚠️\n\n`;
    content += `Institution/School Name: _________________________________\n\n`;
    content += `Date: ${date}\n`;
    content += `Total Questions: ${questions.length}\n\n`;
    
    content += `QUICK REFERENCE ANSWER KEY:\n`;
    content += `${'-'.repeat(60)}\n`;
    
    // Create a grid layout for answers
    for (let i = 0; i < questions.length; i += 10) {
      const row = questions.slice(i, i + 10).map((question, index) => 
        `Q.${(i + index + 1).toString().padStart(2, '0')}: ${String.fromCharCode(65 + question.correctAnswer)}`
      ).join('  |  ');
      content += `${row}\n`;
    }
    content += `\n`;
    
    content += `DETAILED ANSWERS & EXPLANATIONS:\n`;
    content += `${'='.repeat(80)}\n\n`;
    
    questions.forEach((question, index) => {
      content += `Q.${index + 1} ${question.question}\n`;
      content += `     ✅ Correct Answer: (${String.fromCharCode(65 + question.correctAnswer)}) ${question.options[question.correctAnswer]}\n`;
      if (question.explanation) {
        content += `     💡 Explanation: ${question.explanation}\n`;
      }
      content += `${'-'.repeat(80)}\n\n`;
    });
    
    content += `⚠️ CONFIDENTIAL DOCUMENT - FOR AUTHORIZED PERSONNEL ONLY ⚠️\n`;
    content += `Generated by QuizAI on ${new Date().toLocaleString()}\n`;
    content += `Professional Quiz Generation Platform\n`;
    
    const blob = new Blob([content], { type: 'text/plain;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `${quizData?.title || 'quiz'}-answer-key.txt`;
    link.click();
    URL.revokeObjectURL(link.href);
  },

  generateDOCX: async (quizData, questions) => {
    const { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType, BorderStyle, Table, TableRow, TableCell, WidthType } = await import('docx');
    
    const doc = new Document({
      sections: [{
        properties: {
          page: {
            margin: {
              top: 1134,
              right: 1134,
              bottom: 1134,
              left: 1134,
            },
          },
        },
        children: [
          // Header Section
          new Paragraph({
            children: [
              new TextRun({
                text: "[Institution/School Name]",
                bold: true,
                size: 32,
              }),
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 200 },
          }),
          
          new Paragraph({
            children: [
              new TextRun({
                text: `${quizData?.title || "Quiz"} - ANSWER KEY`,
                bold: true,
                size: 44,
                color: "dc3545",
                underline: {},
              }),
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 300 },
          }),
          
          new Paragraph({
            children: [
              new TextRun({
                text: `Date: ${new Date().toLocaleDateString()} | Total Questions: ${questions.length}`,
                bold: true,
                size: 24,
              }),
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 400 },
          }),
          
          new Paragraph({
            text: "⚠️ CONFIDENTIAL - TEACHER'S ANSWER KEY - DO NOT DISTRIBUTE TO STUDENTS ⚠️",
            alignment: AlignmentType.CENTER,
            color: "721c24",
            bold: true,
            shading: { fill: "f8d7da" },
            spacing: { after: 600 },
          }),
          
          // Quick Reference Header
          new Paragraph({
            children: [
              new TextRun({
                text: "QUICK REFERENCE ANSWER KEY",
                bold: true,
                size: 28,
                underline: {},
              }),
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 400 },
          }),
          
          // Quick answers in table format
          new Table({
            rows: Array.from({ length: Math.ceil(questions.length / 5) }, (_, rowIndex) => 
              new TableRow({
                children: Array.from({ length: 5 }, (_, colIndex) => {
                  const questionIndex = rowIndex * 5 + colIndex;
                  const question = questions[questionIndex];
                  return new TableCell({
                    children: [new Paragraph({
                      children: [
                        new TextRun({
                          text: question ? `Q.${questionIndex + 1}: ${String.fromCharCode(65 + question.correctAnswer)}` : "",
                          bold: true,
                          size: 20,
                        })
                      ],
                      alignment: AlignmentType.CENTER,
                    })],
                    shading: { fill: "f8f9fa" },
                    borders: {
                      top: { style: BorderStyle.SINGLE, size: 1 },
                      bottom: { style: BorderStyle.SINGLE, size: 1 },
                      left: { style: BorderStyle.SINGLE, size: 1 },
                      right: { style: BorderStyle.SINGLE, size: 1 },
                    },
                  });
                })
              })
            ),
            width: { size: 100, type: WidthType.PERCENTAGE },
          }),
          
          new Paragraph({
            children: [
              new TextRun({
                text: "DETAILED ANSWERS & EXPLANATIONS",
                bold: true,
                size: 28,
                underline: {},
              }),
            ],
            alignment: AlignmentType.CENTER,
            spacing: { before: 800, after: 400 },
          }),
          
          // Detailed answers
          ...questions.flatMap((question, index) => [
            new Paragraph({
              children: [
                new TextRun({
                  text: `Q.${index + 1}: ${question.question}`,
                  bold: true,
                  size: 24,
                }),
              ],
              spacing: { before: 400, after: 200 },
              shading: { fill: "f8fff9" },
              border: {
                left: { style: BorderStyle.SINGLE, size: 5, color: "28a745" },
              },
            }),
            
            new Paragraph({
              children: [
                new TextRun({
                  text: `✅ Correct Answer: (${String.fromCharCode(65 + question.correctAnswer)}) ${question.options[question.correctAnswer]}`,
                  bold: true,
                  color: "155724",
                  size: 22,
                }),
              ],
              spacing: { after: 200 },
              shading: { fill: "d4edda" },
            }),
            
            ...(question.explanation ? [
              new Paragraph({
                children: [
                  new TextRun({
                    text: `💡 Explanation: ${question.explanation}`,
                    italics: true,
                    size: 20,
                  }),
                ],
                spacing: { after: 400 },
                shading: { fill: "e8f5e9" },
              })
            ] : [new Paragraph({ text: "", spacing: { after: 400 } })]),
          ]),
          
          // Footer
          new Paragraph({
            text: "⚠️ CONFIDENTIAL DOCUMENT - FOR AUTHORIZED PERSONNEL ONLY ⚠️",
            alignment: AlignmentType.CENTER,
            color: "721c24",
            bold: true,
            shading: { fill: "f8d7da" },
            spacing: { before: 800, after: 200 },
          }),
          new Paragraph({
            children: [
              new TextRun({
                text: `Generated by QuizAI on ${new Date().toLocaleString()}`,
                size: 18,
                color: "666666",
              }),
            ],
            alignment: AlignmentType.CENTER,
          }),
          new Paragraph({
            children: [
              new TextRun({
                text: "Professional Quiz Generation Platform",
                size: 18,
                color: "666666",
              }),
            ],
            alignment: AlignmentType.CENTER,
          }),
        ],
      }],
    });

    const blob = await Packer.toBlob(doc);
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${quizData?.title || 'quiz'}-answer-key.docx`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }
};

export { CombinedPDFGenerator, QuizSheetGenerator, AnswerKeyGenerator };